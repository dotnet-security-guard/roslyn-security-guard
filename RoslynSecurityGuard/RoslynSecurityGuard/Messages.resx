<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandInjectionAnalyzer_Message" xml:space="preserve">
    <value>The dynamic value passed to the command execution should be validated.</value>
  </data>
  <data name="CommandInjectionAnalyzer_Title" xml:space="preserve">
    <value>Potential command injection with Process.Start</value>
  </data>
  <data name="EnableEventValidationFalse_Message" xml:space="preserve">
    <value>Event validation is disabled. The integrity of client-side control will not be validated on postback.</value>
  </data>
  <data name="EnableEventValidationFalse_Title" xml:space="preserve">
    <value>Event validation is disabled</value>
  </data>
  <data name="EnableViewStateMac_Message" xml:space="preserve">
    <value>View state mac is disabled. The view state could be altered by an attacker. (This feature cannot be disabled in the recent version of ASP.net)</value>
  </data>
  <data name="EnableViewStateMac_Title" xml:space="preserve">
    <value>View state mac is disabled (Future)</value>
  </data>
  <data name="LinqSqlInjectionAnalyzer_Message" xml:space="preserve">
    <value>The dynamic value passed in the SQL query should be validated.</value>
  </data>
  <data name="LinqSqlInjectionAnalyzer_Title" xml:space="preserve">
    <value>Potential SQL injection with LINQ</value>
  </data>
  <data name="ValidateRequestFalse_Message" xml:space="preserve">
    <value>Request validation, which provided additionnal protection against Cross-Site Scripting (XSS), has been disabled. </value>
  </data>
  <data name="ValidateRequestFalse_Title" xml:space="preserve">
    <value>Request validation has been disabled (Future)</value>
  </data>
  <data name="ViewStateEncryptionModeFalse_Message" xml:space="preserve">
    <value>View state is not encrypted. Controls may leak sensitive data that could be read client-side.</value>
  </data>
  <data name="ViewStateEncryptionModeFalse_Title" xml:space="preserve">
    <value>View state is not encrypted (Future)</value>
  </data>
  <data name="WeakCertificateValidationAnalyzer_Message" xml:space="preserve">
    <value>Certificate Validation has been disabled. The communication could be intercepted.</value>
  </data>
  <data name="WeakCertificateValidationAnalyzer_Title" xml:space="preserve">
    <value>Certificate Validation has been disabled</value>
  </data>
  <data name="WeakCipherAnalyzer_Message" xml:space="preserve">
    <value>{0} is not considered a strong cipher for modern applications. Currently, NIST recommends the usage of AES block ciphers instead of {0}.</value>
  </data>
  <data name="WeakCipherAnalyzer_Title" xml:space="preserve">
    <value>Weak cipher algorithm</value>
  </data>
  <data name="WeakCipherModeAnalyzerCbc_Message" xml:space="preserve">
    <value>This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt the message if the system exposed the difference between plaintext with invalid padding or valid padding.</value>
  </data>
  <data name="WeakCipherModeAnalyzerCbc_Title" xml:space="preserve">
    <value>CBC mode is weak</value>
  </data>
  <data name="WeakCipherModeAnalyzerEcb_Message" xml:space="preserve">
    <value>ECB mode will produce the same result for identical blocks (ie: 16 bytes for AES). An attacker could be able to guess the encrypted message. The use of AES in CBC mode with a HMAC is recommended guaranteeing integrity and confidentiality.</value>
  </data>
  <data name="WeakCipherModeAnalyzerEcb_Title" xml:space="preserve">
    <value>ECB mode is weak</value>
  </data>
  <data name="WeakCipherModeAnalyzerGeneric_Message" xml:space="preserve">
    <value>The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection. The use of AES in CBC mode with a HMAC is recommended guaranteeing integrity and confidentiality.</value>
  </data>
  <data name="WeakCipherModeAnalyzerGeneric_Title" xml:space="preserve">
    <value>Weak cipher mode</value>
  </data>
  <data name="WeakHashingAnalyzer_Message" xml:space="preserve">
    <value>{0} is no longer considered a strong hashing algorithim for password storage and signature generation.</value>
  </data>
  <data name="WeakHashingAnalyzer_Title" xml:space="preserve">
    <value>Weak hashing function</value>
  </data>
  <data name="WeakRandomAnalyzer_Message" xml:space="preserve">
    <value>The random numbers generated could be predicted.</value>
  </data>
  <data name="WeakRandomAnalyzer_Title" xml:space="preserve">
    <value>Weak random generator</value>
  </data>
  <data name="XPathInjectionAnalyzer_Message" xml:space="preserve">
    <value>The dynamic value passed to the XPath query should be validated</value>
  </data>
  <data name="XPathInjectionAnalyzer_Title" xml:space="preserve">
    <value>Potential XPath injection with XmlDocument</value>
  </data>
  <data name="XxeAnalyzer_Message" xml:space="preserve">
    <value>The XML parser is configured incorrectly. The operation could be vulnerable to XML eXternal Entity (XXE) processing.</value>
  </data>
  <data name="XxeAnalyzer_Title" xml:space="preserve">
    <value>XML parsing vulnerable to XXE</value>
  </data>
</root>